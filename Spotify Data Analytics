# For this project I downloaded Spotify data from Kaggle.
# Then, I created a table to insert Spotify data into.
# After, I inserted the Spotify Data .csv into the table.
# Lastly, I used SQL to analyze the data.

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )


# I explored the data using the following SQL:

# Started off by taking a look at our data.
SELECT  * FROM BIT_DB.Spotifydata

#  Then, I deciphered a couple analytics about the Spotify data by answering my own questions...

#1. Which artist have more than 1 song in Spotify's top 50 and how many times were they listed?

SELECT artist_name,  COUNT(artist_name) as times_listed
FROM BIT_DB.Spotifydata
GROUP BY artist_name
Having times_listed>1


#2. What artist released the longest song?

SELECT artist_name, max(duration_ms) as song_length
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY duration_ms  desc
LIMIT 1


#3. What is the avg popularity and danceability by artist and track?

SELECT artist_name,track_name,avg(popularity),avg(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name


#4. Who are the top 10 artist based on popularity?

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10
